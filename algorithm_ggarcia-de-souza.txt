These are the function and what each of them do:



leap_year() function

1. This will take a year as an input

2. If I divide the year by modulus(%) 4 does it return 0? If yes, continue. If not, return False

3. If I divide the year by modulus(%) 100 does it return 0? If yes, continue. If not, return True

4. If I divide the year by modulus(%) 400 does it return 0? If yes, continue. If not, return False

5. If the year passes all of the modulus divisions, then year is a leap year


range_check() function

1. This will take two objects. One will be an integer and the other a tuple with two integers

2. If object 1 is higher or equal to the first element in tuple, it will return True

3. Else, it will return False.


sanitize() function

1. This will take one object which will be a string 

2. If this function finds a "/" in the object, it will replace the "/" with a space " "

3. If this function finds a "-" in the object, it will replace the "-" with a space " "

4. If this function finds a "." in the object, it will replace the "." with a space " "

5. If it does not find any of these characters ("/",".","-") it means that the user entered the date in the "YYYYMMDD" format
The function will use slicing to create an object with space " "

7. It will return a new object with a space between the numbers


size_check() function

1. This will take an object

2. If the length of the object equals to 10, then return True. The 10 here is because of the spaces. For example, "2020 12 12"

3. If the length is not equal to 10, then return False

usage() function

1. This will not take any object

2. It will return the following string: "Usage: a1_ggarcia-de-souza.py YYYYMMDD|YYYY/MM/DD|YYYY-MM-DD|YYYY.MM.DD"




This is how the program will work after all the function have been created.



if __name__ == "__main__":

1. If the number of command line arguments is not equal to 2, it will print usage() and exit

2. I will create an input_variable that will sanitize() the sys.argv1 input.

3. I will do a size_check() on the input_variable. If False print error and exit.

4. I will split() the input_variable so I can get the year, month, and day variables.

5. I will run a range_check() on the year and the tuple (1900,2020). If false, it will print an error and exit.

6. I will run a range_check() on the month and the tuple (1,12). If false, it will print an error and exit.

7. I will use the leap_year() function on year so I can create tuples containing the number of days for each month.
If leap_year() is True, then February tuple is (1,29). If False, February tuple is (1,28).

8. I will do a range_check on on the day and a tuple containing the correct number of months. If False, it will print an error and exit.

9. I will create a list with the name of the months.

10. I will create a variable that will concatenate the name of the month, the day, and the year.

11. I will print the variable with the final result.